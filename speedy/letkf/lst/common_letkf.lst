
 Fujitsu Fortran Version 2.0.0  Wed Jun 24 11:54:48 2020

 Compilation information
   Current directory : /fefs/data/o/o140/speedy/letkf-master_jss2_LPF1/speedy/letkf
   Source file       : common_letkf.f90

 Option information
   Command line options : -Kident_mpi -f2004 -Kfast,ocl -NRtrap -Ntl_trt -Kvisimpact -Kmfunc=2 -Kpreex -O3 -Kparallel -Kdynamic_iteration -Cpp -Kprefetch_cache_level=all,prefetch_iteration_L2=50 -Ksimd -Knomfunc -Qi -Qt -Kfed -c -IU1 -I/opt/FJSVmxlang/GM-2.0.0-07/include/mpi/fujitsu -Knointentopt -I/opt/FJSVmxlang/GM-2.0.0-07/lib64
   Cpp options          : -IU1 -I/opt/FJSVmxlang/GM-2.0.0-07/include/mpi/fujitsu -I/opt/FJSVmxlang/GM-2.0.0-07/lib64 -D__FUJITSU -Dunix -Dsparc -D__sparc__ -D__unix -D__sparc -D__frt_version=700 -D__HPC_ACE__ -D__HPC_ACE2__ -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -Dlinux -otmp -D__sparcv9 -D__sparc_v9__ -D__arch64__
   Effective options    : -fi -g0 -AE -Free -O3 -Qi,p,t -X9
                          -x0 -xaccept=nomodule_allocatable
                          -KHPC_ACE2 -KFLTLD -Kadr44 -Knoauto
                          -Knoautoobjstack -Knocalleralloc -Kdalign -Keval
                          -Kfed -Knofenv_access -Kfp_contract -Kfp_relaxed
                          -Kfsimple -Kilfunc=loop -Knointentopt -Klargepage
                          -Kloop_blocking -Kloop_fission -Kloop_nofission_if
                          -Kloop_fusion -Kloop_interchange
                          -Kloop_nopart_parallel -Kloop_nopart_simd
                          -Kloop_noversioning -Knolto -Knonf -Kns -Knomfunc
                          -Kocl -Komitfp -Koptmsg=1 -Kpreex
                          -Kprefetch_conditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_iteration_L2=50 -Kprefetch_nostrong
                          -Kprefetch_strong_L2 -Knoshortloop -Ksimd=auto
                          -Ksimd_reduction_product -Ksimd_noseparate_stride
                          -Knostriping -Kswp -Knotemparraystack -Kunroll
                          -Knouxsimd -KNOXFILL
                          -Knoopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_noordered_reduction -Kopenmp_notls
                          -Knothreadsafe -Kparallel -Kparallel_nofp_precision
                          -Knoarray_private -Kdynamic_iteration -Kreduction
                          -Kregion_extension
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Nnocoarray
                          -Nnocompdisp -Nnocopyarg -Nfreealloc -Nf90move
                          -Nnohook_func -Nnohook_time -Nline -Nlst -Nlst=i
                          -Nlst=p -Nlst=t -Nnomallocfree -Nnoobsfun
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nrt_notune -Nnosave -Nsetvalue=noheap
                          -Nsetvalue=nostack -Nsetvalue=noscalar
                          -Nsetvalue=noarray -Nsetvalue=nostruct -Nuse_rodata

 Module "common_letkf"
  (inc)(line-no.)(nest)(optimize)
               1                     MODULE common_letkf
               2                     !=======================================================================
               3                     !
               4                     ! [PURPOSE:] Local Ensemble Transform Kalman Filtering (LETKF)
               5                     !            Model Independent Core Module
               6                     !
               7                     ! [REFERENCES:]
               8                     !  [1] Ott et al., 2004: A local ensemble Kalman filter for atmospheric
               9                     !    data assimilation. Tellus, 56A, 415-428.
              10                     !  [2] Hunt et al., 2007: Efficient Data Assimilation for Spatiotemporal
              11                     !    Chaos: A Local Ensemble Transform Kalman Filter. Physica D, 230,
              12                     !    112-126.
              13                     !
              14                     ! [HISTORY:]
              15                     !  01/21/2009 Takemasa Miyoshi  Created at U. of Maryland, College Park
              16                     !
              17                     !=======================================================================
              18                     !$USE OMP_LIB
              19                       USE common
              20                       USE common_mtx
              21                     
              22                       IMPLICIT NONE
              23                     
              24                       PUBLIC
              25                     !=======================================================================
              26                     !  LEKF Model Independent Parameters
              27                     !=======================================================================
              28                     !  INTEGER,PARAMETER :: nbv=16    ! ensemble size
              29                       !INTEGER,SAVE :: nbv=02
              30                       REAL(r_size),PARAMETER :: relax_alpha = 0.0d0  ! relaxation parameter     !GYL
              31                       REAL(r_size),PARAMETER :: min_infl = 0.0d0     ! minimum inlfation factor !GYL
              32                       INTEGER,SAVE :: option_aloc = 0 ! SK 20180821 ; 0:normal 1:adaptive localization
              33                     CONTAINS
              34                     !=======================================================================
              35                     !  Main Subroutine of LETKF Core
              36                     !   INPUT
              37                     !     nobs             : array size, but only first nobsl elements are used
              38                     !     nobsl            : total number of observation assimilated at the point
              39                     !     hdxb(nobs,nbv)   : obs operator times fcst ens perturbations
              40                     !     rdiag(nobs)      : observation error variance
              41                     !     rloc(nobs)       : localization weighting function
              42                     !     dep(nobs)        : observation departure (yo-Hxb)
              43                     !     parm_infl        : covariance inflation parameter
              44                     !   OUTPUT
              45                     !     trans(nbv,nbv) : transformation matrix
              46                     !=======================================================================
              47                     SUBROUTINE letkf_core(nobs,nobsl,hdxb,rdiag,rloc,dep,parm_infl,trans,LOGIC_LPFGM,work3,work4)
              48                       IMPLICIT NONE
              49                       INTEGER,INTENT(IN) :: nobs
              50                       INTEGER,INTENT(IN) :: nobsl
              51                       REAL(r_size),INTENT(IN) :: hdxb(1:nobs,1:nbv)
              52                       REAL(r_size),INTENT(IN) :: rdiag(1:nobs)
              53                       REAL(r_size),INTENT(IN) :: rloc(1:nobs)
              54                       REAL(r_size),INTENT(IN) :: dep(1:nobs)
              55                       REAL(r_size),INTENT(INOUT) :: parm_infl
              56                       REAL(r_size),INTENT(OUT) :: trans(nbv,nbv)
              57                       REAL(r_size) :: hdxb_rinv(nobsl,nbv)
              58                       REAL(r_size) :: eivec(nbv,nbv)
              59                       REAL(r_size) :: eival(nbv)
              60                       REAL(r_size) :: pa(nbv,nbv)
              61                       REAL(r_size) :: work1(nbv,nbv)
              62                       REAL(r_size) :: work2(nbv,nobsl)
              63                       REAL(r_size),INTENT(OUT) :: work3(nbv)
              64                       REAL(r_size),INTENT(OUT) :: work4(nbv,nbv)
              65                       REAL(r_size) :: rho
              66                       REAL(r_size) :: parm(4),sigma_o,gain
              67                       REAL(r_size),PARAMETER :: sigma_b = 0.04d0 !error stdev of parm_infl
              68                       INTEGER :: i,j,k
              69                       LOGICAL, INTENT(IN) :: LOGIC_LPFGM
              70                       REAL(r_size)        :: work5(nbv,nbv)  ! defined for LPFGM ; SK20191114
              71                     ! LOGICAL :: exist
              72     1                 IF(nobsl == 0) THEN
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 9
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      trans
                                   <<< Loop-information  End >>>
              73     1  pp   8v          trans = 0.0d0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1778
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<< Loop-information  End >>>
              74     2  pp   8v          DO i=1,nbv
              75     2   p   8v            trans(i,i) = SQRT(parm_infl)
              76     2   p   8v          END DO
              77     2                   IF (relax_alpha /= 0.0d0) THEN                                    !GYL
              78     3                     DO i=1,nbv                                                      !GYL
              79     3                       trans(i,i) = relax_alpha + (1.0d0 - relax_alpha) * trans(i,i) !GYL
              80     3                     END DO                                                          !GYL
              81     2                   END IF                                                            !GYL
              82     1               
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2000
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      work3
                                   <<< Loop-information  End >>>
              83     1  pp   8v          work3(:)   = 0.0d0           ! mean update (LETKF)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 7
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      work5, work4
                                   <<< Loop-information  End >>>
              84     1  pp   8v          work4(:,:) = SQRT(parm_infl) ! ptb  update (LETKF)
              85     1   p   8v          work5(:,:) = 0.0d0           ! ptb  update (LPFGM)
              86     1                   RETURN
              87     1                 ELSE
              88     1               !-----------------------------------------------------------------------
              89     1               !  hdxb Rinv
              90     1               !-----------------------------------------------------------------------
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      rdiag, rloc, hdxb, hdxb_rinv
                                   <<< Loop-information  End >>>
              91     2  pp             DO j=1,nbv
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 381
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      rdiag, rloc, hdxb, hdxb_rinv
                                   <<< Loop-information  End >>>
              92     3  pp   6v          DO i=1,nobsl
              93     3   p   6v            hdxb_rinv(i,j) = hdxb(i,j) / rdiag(i) * rloc(i)
              94     3   p   6v          END DO
              95     2   p             END DO
              96     1               !-----------------------------------------------------------------------
              97     1               !  hdxb^T Rinv hdxb
              98     1               !-----------------------------------------------------------------------
              99     1                 CALL dgemm('t','n',nbv,nbv,nobsl,1.0d0,hdxb_rinv,nobsl,hdxb(1:nobsl,:),&
             100     1                   & nobsl,0.0d0,work1,nbv)
             101     1               !  DO j=1,nbv
             102     1               !    DO i=1,nbv
             103     1               !      work1(i,j) = hdxb_rinv(1,i) * hdxb(1,j)
             104     1               !      DO k=2,nobsl
             105     1               !        work1(i,j) = work1(i,j) + hdxb_rinv(k,i) * hdxb(k,j)
             106     1               !      END DO
             107     1               !    END DO
             108     1               !  END DO
             109     1               !-----------------------------------------------------------------------
             110     1               !  hdxb^T Rinv hdxb + (m-1) I / rho (covariance inflation)
             111     1               !-----------------------------------------------------------------------
             112     2                 IF (min_infl /= 0.0d0 .AND. parm_infl < min_infl) THEN !GYL
             113     2                   parm_infl = min_infl                                 !GYL
             114     2                 END IF                                                 !GYL
             115     1                 rho = 1.0d0 / parm_infl
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1334
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             116     2  pp   6v        DO i=1,nbv
             117     2   p   6v          work1(i,i) = work1(i,i) + REAL(nbv-1,r_size) * rho
             118     2   p   6v        END DO
             119     1               !-----------------------------------------------------------------------
             120     1               !  eigenvalues and eigenvectors of [ hdxb^T Rinv hdxb + (m-1) I ]
             121     1               !-----------------------------------------------------------------------
             122     1                 CALL mtx_eigen(1,nbv,work1,eival,eivec,i)
             123     1               !-----------------------------------------------------------------------
             124     1               !  Pa = [ hdxb^T Rinv hdxb + (m-1) I ]inv
             125     1               !-----------------------------------------------------------------------
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 3
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      eivec, work1
                                   <<<    PREFETCH(SOFT) : 2
                                   <<<     SEQUENTIAL : 2
                                   <<<      eival: 2
                                   <<< Loop-information  End >>>
             126     2  pp             DO j=1,nbv
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 433
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      work1, eivec
                                   <<< Loop-information  End >>>
             127     3  pp   8v          DO i=1,nbv
             128     3   p   8v            work1(i,j) = eivec(i,j) / eival(j)
             129     3   p   8v          END DO
             130     2   p             END DO
             131     1                 CALL dgemm('n','t',nbv,nbv,nbv,1.0d0,work1,nbv,eivec,&
             132     1                   & nbv,0.0d0,pa,nbv)
             133     1               !  DO j=1,nbv
             134     1               !    DO i=1,nbv
             135     1               !      pa(i,j) = work1(i,1) * eivec(j,1)
             136     1               !      DO k=2,nbv
             137     1               !        pa(i,j) = pa(i,j) + work1(i,k) * eivec(j,k)
             138     1               !      END DO
             139     1               !    END DO
             140     1               !  END DO
             141     1               !-----------------------------------------------------------------------
             142     1               !  Pa hdxb_rinv^T
             143     1               !-----------------------------------------------------------------------
             144     1                 CALL dgemm('n','t',nbv,nobsl,nbv,1.0d0,pa,nbv,hdxb_rinv,&
             145     1                   & nobsl,0.0d0,work2,nbv)
             146     1               !  DO j=1,nobsl
             147     1               !    DO i=1,nbv
             148     1               !      work2(i,j) = pa(i,1) * hdxb_rinv(j,1)
             149     1               !      DO k=2,nbv
             150     1               !        work2(i,j) = work2(i,j) + pa(i,k) * hdxb_rinv(j,k)
             151     1               !      END DO
             152     1               !    END DO
             153     1               !  END DO
             154     1               !-----------------------------------------------------------------------
             155     1               !  Pa hdxb_rinv^T dep
             156     1               !-----------------------------------------------------------------------
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 889
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 2)
                                   <<<    SPLIT
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      work3, work2
                                   <<< Loop-information  End >>>
             157     2  pp   8v        DO i=1,nbv
             158     2   p   8v          work3(i) = work2(i,1) * dep(1)
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 1)
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      work2, work3
                                   <<< Loop-information  End >>>
             159     3       8           DO j=2,nobsl
             160     3   p   8v            work3(i) = work3(i) + work2(i,j) * dep(j)
             161     3       8           END DO
             162     2   p   8v        END DO
             163     1               
             164     1                 !===> SHIFT MATRIX FOR LPFGM
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 9
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      work5
                                   <<< Loop-information  End >>>
             165     1  pp   8v        work5(:,:) = 0.0d0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    SPLIT
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      work2, work5
                                   <<< Loop-information  End >>>
             166     2  pp             DO k=1,nbv
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 534
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      work5, work2
                                   <<< Loop-information  End >>>
             167     3  pp   8v          DO i=1,nbv
             168     3   p   8v            work5(i,k) = work2(i,1) * ( dep(1) - hdxb(1,k) )
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    INTERCHANGED(nest: 2)
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      work2, work5
                                   <<<    PREFETCH(SOFT) : 4
                                   <<<     SEQUENTIAL : 4
                                   <<<      dep: 2, hdxb: 2
                                   <<< Loop-information  End >>>
             169     4   p   8             DO j=2,nobsl
             170     4   p   8v              work5(i,k) = work5(i,k) + work2(i,j) * ( dep(j) - hdxb(j,k) )
             171     4   p   8             END DO
             172     3   p   8v          END DO
             173     2   p             END DO
             174     1               
             175     1                 !!CHECKED;SK!!DO k=1,nbv
             176     1                 !!CHECKED;SK!!  PRINT '(F6.3,a,40F6.3)', work3(k), " || ", work5(k,1:20)
             177     1                 !!CHECKED;SK!!END DO
             178     1               !-----------------------------------------------------------------------
             179     1               !  T = sqrt[(m-1)Pa]
             180     1               !-----------------------------------------------------------------------
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 4
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      eivec, work1, eival
                                   <<< Loop-information  End >>>
             181     2  pp             DO j=1,nbv
             182     2   p               rho = SQRT( REAL(nbv-1,r_size) / eival(j) )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 728
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      work1, eivec
                                   <<< Loop-information  End >>>
             183     3  pp   8v          DO i=1,nbv
             184     3   p   8v            work1(i,j) = eivec(i,j) * rho
             185     3   p   8v          END DO
             186     2   p             END DO
             187     1                 CALL dgemm('n','t',nbv,nbv,nbv,1.0d0,work1,nbv,eivec,&
             188     1                   & nbv,0.0d0,trans,nbv)
             189     1               !  DO j=1,nbv
             190     1               !    DO i=1,nbv
             191     1               !      trans(i,j) = work1(i,1) * eivec(j,1)
             192     1               !      DO k=2,nbv
             193     1               !        trans(i,j) = trans(i,j) + work1(i,k) * eivec(j,k)
             194     1               !      END DO
             195     1               !    END DO
             196     1               !  END DO
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 7
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      trans, work4
                                   <<< Loop-information  End >>>
             197     1  pp   8v        work4(:,:) = trans(:,:) ! <--> A.P 6/12/2018 - Saving W matrix
             198     1               !-----------------------------------------------------------------------
             199     1               !  T + Pa hdxb_rinv^T dep
             200     1               !-----------------------------------------------------------------------
             201     2                 IF (relax_alpha /= 0.0d0) THEN            !GYL
             202     2                   trans = (1.0d0 - relax_alpha) * trans   !GYL
             203     3                   DO i=1,nbv                              !GYL
             204     3                     trans(i,i) = relax_alpha + trans(i,i) !GYL
             205     3                   END DO                                  !GYL
             206     2                 END IF                                    !GYL
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 4
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      trans, work3
                                   <<< Loop-information  End >>>
             207     2  pp             DO j=1,nbv
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 667
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      work3, trans
                                   <<< Loop-information  End >>>
             208     3  pp   8v          DO i=1,nbv
             209     3   p   8v            trans(i,j) = trans(i,j) + work3(i)
             210     3   p   8v          END DO
             211     2   p             END DO
             212     1               !-----------------------------------------------------------------------
             213     1               !  Inflation estimation
             214     1               !-----------------------------------------------------------------------
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    FULL UNROLLING
                                   <<< Loop-information  End >>>
             215     1       f         parm = 0.0d0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 458
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      rdiag, rloc, dep
                                   <<< Loop-information  End >>>
             216     2  pp   6v        DO i=1,nobsl
             217     2   p   6v          parm(1) = parm(1) + dep(i)*dep(i)/rdiag(i) * rloc(i)
             218     2   p   6v        END DO
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 4
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      hdxb_rinv, hdxb, (unknown)
                                   <<< Loop-information  End >>>
             219     2  pp             DO j=1,nbv
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 800
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      hdxb, hdxb_rinv
                                   <<< Loop-information  End >>>
             220     3  pp   8v          DO i=1,nobsl
             221     3   p   8v            parm(2) = parm(2) + hdxb_rinv(i,j) * hdxb(i,j)
             222     3   p   8v          END DO
             223     2   p             END DO
             224     1                 parm(2) = parm(2) / REAL(nbv-1,r_size)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1778
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      rloc
                                   <<< Loop-information  End >>>
             225     1  pp   8v        parm(3) = SUM(rloc(1:nobsl))
             226     1                 parm(4) = (parm(1)-parm(3))/parm(2) - parm_infl
             227     1               !  sigma_o = 1.0d0/REAL(nobsl,r_size)/MAXVAL(rloc(1:nobsl))
             228     1                 sigma_o = 2.0d0/parm(3)*((parm_infl*parm(2)+parm(3))/parm(2))**2
             229     1                 gain = sigma_b**2 / (sigma_o + sigma_b**2)
             230     1                 parm_infl = parm_infl + gain * parm(4)
             231     1               
             232     2                 IF( LOGIC_LPFGM )THEN
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    FUSED(lines: 233,234)
                                   <<< Loop-information  End >>>
             233     2   p               work3(:) = 0.0d0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 7
                                   <<<  [OPTIMIZATION]
                                   <<<    FUSED
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      work3, work5, work4
                                   <<< Loop-information  End >>>
             234     2  pp   8v          work4(:,:) = work5(:,:)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1231
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             235     3  pp   6v          DO k=1,nbv
             236     3   p   6v            work4(k,k) = work5(k,k) + 1.0d0
             237     3   p   6v          END DO
             238     2                 ENDIF
             239     1               
             240     1                 RETURN
             241     1                 END IF
             242                     END SUBROUTINE letkf_core
             243                     
             244                     END MODULE common_letkf

 Diagnostic messages: program name(common_letkf)
   jwd8220o-i  "common_letkf.f90", line 1: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
  Module subprogram name(letkf_core)
   jwd8209o-i  "common_letkf.f90", line 93: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "common_letkf.f90", line 128: Division is changed to multiplication by reciprocal.
   jwd8201o-i  "common_letkf.f90", line 167: Invariant expression within loop is moved outside loop.
   jwd8209o-i  "common_letkf.f90", line 217: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8208o-i  "common_letkf.f90", line 217: Method of calculating sum or product is changed.
   jwd8208o-i  "common_letkf.f90", line 221: Method of calculating sum or product is changed.
   jwd8208o-i  "common_letkf.f90", line 225: Method of calculating sum or product is changed.
   jwd8209o-i  "common_letkf.f90", line 230: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.

 Procedure information
   Lines      : 244
   Statements : 129
   Stack(byte): 34272
   Prefetch num: 6

 Total information
   Procedures       : 1
   Total lines      : 244
   Total statements : 129
   Total stack(byte): 34272
   Total prefetch num: 6

