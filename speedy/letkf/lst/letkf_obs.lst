
 Fujitsu Fortran Version 2.0.0  Wed Jun 24 11:55:13 2020

 Compilation information
   Current directory : /fefs/data/o/o140/speedy/letkf-master_jss2_LPF1/speedy/letkf
   Source file       : letkf_obs.f90

 Option information
   Command line options : -Kident_mpi -f2004 -Kfast,ocl -NRtrap -Ntl_trt -Kvisimpact -Kmfunc=2 -Kpreex -O3 -Kparallel -Kdynamic_iteration -Cpp -Kprefetch_cache_level=all,prefetch_iteration_L2=50 -Ksimd -Knomfunc -Qi -Qt -Kfed -c -IU1 -I/opt/FJSVmxlang/GM-2.0.0-07/include/mpi/fujitsu -Knointentopt -I/opt/FJSVmxlang/GM-2.0.0-07/lib64
   Cpp options          : -IU1 -I/opt/FJSVmxlang/GM-2.0.0-07/include/mpi/fujitsu -I/opt/FJSVmxlang/GM-2.0.0-07/lib64 -D__FUJITSU -Dunix -Dsparc -D__sparc__ -D__unix -D__sparc -D__frt_version=700 -D__HPC_ACE__ -D__HPC_ACE2__ -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -Dlinux -otmp -D__sparcv9 -D__sparc_v9__ -D__arch64__
   Effective options    : -fi -g0 -AE -Free -O3 -Qi,p,t -X9
                          -x0 -xaccept=nomodule_allocatable
                          -KHPC_ACE2 -KFLTLD -Kadr44 -Knoauto
                          -Knoautoobjstack -Knocalleralloc -Kdalign -Keval
                          -Kfed -Knofenv_access -Kfp_contract -Kfp_relaxed
                          -Kfsimple -Kilfunc=loop -Knointentopt -Klargepage
                          -Kloop_blocking -Kloop_fission -Kloop_nofission_if
                          -Kloop_fusion -Kloop_interchange
                          -Kloop_nopart_parallel -Kloop_nopart_simd
                          -Kloop_noversioning -Knolto -Knonf -Kns -Knomfunc
                          -Kocl -Komitfp -Koptmsg=1 -Kpreex
                          -Kprefetch_conditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_iteration_L2=50 -Kprefetch_nostrong
                          -Kprefetch_strong_L2 -Knoshortloop -Ksimd=auto
                          -Ksimd_reduction_product -Ksimd_noseparate_stride
                          -Knostriping -Kswp -Knotemparraystack -Kunroll
                          -Knouxsimd -KNOXFILL
                          -Knoopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_noordered_reduction -Kopenmp_notls
                          -Knothreadsafe -Kparallel -Kparallel_nofp_precision
                          -Knoarray_private -Kdynamic_iteration -Kreduction
                          -Kregion_extension
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Nnocoarray
                          -Nnocompdisp -Nnocopyarg -Nfreealloc -Nf90move
                          -Nnohook_func -Nnohook_time -Nline -Nlst -Nlst=i
                          -Nlst=p -Nlst=t -Nnomallocfree -Nnoobsfun
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nrt_notune -Nnosave -Nsetvalue=noheap
                          -Nsetvalue=nostack -Nsetvalue=noscalar
                          -Nsetvalue=noarray -Nsetvalue=nostruct -Nuse_rodata

 Module "letkf_obs"
  (inc)(line-no.)(nest)(optimize)
               1                     MODULE letkf_obs
               2                     !=======================================================================
               3                     !
               4                     ! [PURPOSE:] Observational procedures
               5                     !
               6                     ! [HISTORY:]
               7                     !   04/03/2013 Takemasa MIYOSHI  separating obs operator
               8                     !   01/23/2009 Takemasa MIYOSHI  created
               9                     !
              10                     !=======================================================================
              11                     !$USE OMP_LIB
              12                       USE common
              13                       USE common_mpi
              14                       USE common_speedy
              15                       USE common_obs_speedy
              16                       USE common_mpi_speedy
              17                       USE common_letkf
              18                     
              19                       IMPLICIT NONE
              20                       PUBLIC
              21                     
              22                       INTEGER,SAVE :: nobs
              23                       INTEGER,PARAMETER :: nslots=1 ! number of time slots for 4D-LETKF
              24                       INTEGER,PARAMETER :: nbslot=1 ! basetime slot
              25                     !  REAL(r_size),PARAMETER :: sigma_obs=500.0d3
              26                     !  REAL(r_size),PARAMETER :: sigma_obsv=0.4d0
              27                       REAL(r_size),PARAMETER :: sigma_obsv=0.1d0
              28                       REAL(r_size),PARAMETER :: sigma_obst=3.0d0
              29                       REAL(r_size),SAVE :: dist_zero
              30                       REAL(r_size),SAVE :: dist_zerov
              31                       REAL(r_size),ALLOCATABLE,SAVE :: dlon_zero(:)
              32                       REAL(r_size),SAVE :: dlat_zero
              33                       REAL(r_size),ALLOCATABLE,SAVE :: obselm(:)
              34                       REAL(r_size),ALLOCATABLE,SAVE :: obslon(:)
              35                       REAL(r_size),ALLOCATABLE,SAVE :: obslat(:)
              36                       REAL(r_size),ALLOCATABLE,SAVE :: obslev(:)
              37                       REAL(r_size),ALLOCATABLE,SAVE :: obsdat(:)
              38                       REAL(r_size),ALLOCATABLE,SAVE :: obserr(:)
              39                     !  REAL(r_size),ALLOCATABLE,SAVE :: obsk(:)
              40                       REAL(r_size),ALLOCATABLE,SAVE :: obsdep(:)
              41                       REAL(r_size),ALLOCATABLE,SAVE :: obshdxf(:,:)
              42                       INTEGER,SAVE :: nobsgrd(nlon,nlat)
              43                     
              44                     !  REAL(r_size),SAVE :: sigma_obs=9999.0d3
              45                     
              46                     CONTAINS
              47                     !-----------------------------------------------------------------------
              48                     ! Initialize
              49                     !-----------------------------------------------------------------------
              50                     SUBROUTINE set_letkf_obs
              51                       IMPLICIT NONE
              52                       REAL(r_size),PARAMETER :: gross_error=10.0d0
              53                       REAL(r_size) :: dlon1,dlon2,dlon,dlat
              54                       REAL(r_size),ALLOCATABLE :: wk2d(:,:)
              55                       INTEGER,ALLOCATABLE :: iwk2d(:,:)
              56                       REAL(r_size),ALLOCATABLE :: tmpelm(:)
              57                       REAL(r_size),ALLOCATABLE :: tmplon(:)
              58                       REAL(r_size),ALLOCATABLE :: tmplat(:)
              59                       REAL(r_size),ALLOCATABLE :: tmplev(:)
              60                       REAL(r_size),ALLOCATABLE :: tmpdat(:)
              61                       REAL(r_size),ALLOCATABLE :: tmperr(:)
              62                       REAL(r_size),ALLOCATABLE :: tmpk(:)
              63                       REAL(r_size),ALLOCATABLE :: tmpdep(:)
              64                       REAL(r_size),ALLOCATABLE :: tmphdxf(:,:)
              65                       INTEGER,ALLOCATABLE :: tmpqc0(:,:)
              66                       INTEGER,ALLOCATABLE :: tmpqc(:)
              67                       REAL(r_size),ALLOCATABLE :: tmp2elm(:)
              68                       REAL(r_size),ALLOCATABLE :: tmp2lon(:)
              69                       REAL(r_size),ALLOCATABLE :: tmp2lat(:)
              70                       REAL(r_size),ALLOCATABLE :: tmp2lev(:)
              71                       REAL(r_size),ALLOCATABLE :: tmp2dat(:)
              72                       REAL(r_size),ALLOCATABLE :: tmp2err(:)
              73                     !  REAL(r_size),ALLOCATABLE :: tmp2k(:)
              74                       REAL(r_size),ALLOCATABLE :: tmp2dep(:)
              75                       REAL(r_size),ALLOCATABLE :: tmp2hdxf(:,:)
              76                       INTEGER :: nobslots(nslots)
              77                       INTEGER :: n,i,j,ierr,islot,nn,l,im
              78                       INTEGER :: nj(0:nlat-1)
              79                       INTEGER :: njs(1:nlat-1)
              80                       CHARACTER(15) :: obsfile='obsTTNNNNNN.dat'
              81                     
              82                       WRITE(6,'(A)') 'Hello from set_letkf_obs'
              83                     
              84                       dist_zero = sigma_obs * SQRT(10.0d0/3.0d0) * 2.0d0
              85                       dist_zerov = sigma_obsv * SQRT(10.0d0/3.0d0) * 2.0d0
              86                       dlat_zero = dist_zero / pi / re * 180.0d0
              87                       ALLOCATE(dlon_zero(nij1))
              88     1       6         DO i=1,nij1
              89     1                   !debug by A. Yamazaki SOLA 2017!dlon_zero(i) = dlat_zero / COS(pi*lat1(i)/180.0d0)
              90     1       6           CALL search_longestlat(dist_zero,lat1(i),dlat_zero,dlon_zero(i))
              91     1                   ! [in]  :: dist_zero, lat1(i), dlat_zero
              92     1                   ! [out] :: dlon_zero(i)
              93     1       6         END DO
              94                     
              95     1                 IF(myrank == 0) THEN !Assuming all members have the identical obs records
              96     2                   DO islot=1,nslots
              97     2                     im = myrank+1
              98     2                     WRITE(obsfile(4:11),'(I2.2,I6.6)') islot,im
              99     2                     WRITE(6,'(A,I3.3,2A)') 'MYRANK ',myrank,' is reading a file ',obsfile
             100     2                     CALL get_nobs(obsfile,8,nobslots(islot))
             101     2                   END DO
             102     1                 END IF
             103                       CALL MPI_BARRIER(MPI_COMM_WORLD,ierr)
             104                       CALL MPI_BCAST(nobslots,nslots,MPI_INTEGER,0,MPI_COMM_WORLD,ierr)
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    FULL UNROLLING
                                   <<< Loop-information  End >>>
             105             f         nobs = SUM(nobslots)
             106                       WRITE(6,'(I10,A)') nobs,' TOTAL OBSERVATIONS INPUT'
             107                     
             108     1                 IF(nobs == 0) THEN
             109     1                   WRITE(6,'(A)') 'No observation assimilated'
             110     1                   RETURN
             111     1                 END IF
             112                     !
             113                     ! INITIALIZE GLOBAL VARIABLES
             114                     !
             115                       ALLOCATE( tmpelm(nobs) )
             116                       ALLOCATE( tmplon(nobs) )
             117                       ALLOCATE( tmplat(nobs) )
             118                       ALLOCATE( tmplev(nobs) )
             119                       ALLOCATE( tmpdat(nobs) )
             120                       ALLOCATE( tmperr(nobs) )
             121                       ALLOCATE( tmpk(nobs) )
             122                       ALLOCATE( tmpdep(nobs) )
             123                       ALLOCATE( tmphdxf(nobs,nbv) )
             124                       ALLOCATE( tmpqc0(nobs,nbv) )
             125                       ALLOCATE( tmpqc(nobs) )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 9
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      tmpqc0
                                   <<< Loop-information  End >>>
             126        pp   8v        tmpqc0 = 0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 9
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      tmphdxf
                                   <<< Loop-information  End >>>
             127        pp   8v        tmphdxf = 0.0d0
             128                     !
             129                     ! reading observation data
             130                     !
             131                       nn=0
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      nobslots
                                   <<< Loop-information  End >>>
             132     1                 timeslots: DO islot=1,nslots
             133     1                   IF(nobslots(islot) == 0) CYCLE
             134     1                   l=0
             135     2                   DO
             136     2                     im = myrank+1 + nprocs * l
             137     2                     IF(im > nbv) EXIT
             138     2                     WRITE(obsfile(4:11),'(I2.2,I6.6)') islot,im
             139     2                     WRITE(6,'(A,I3.3,2A)') 'MYRANK ',myrank,' is reading a file ',obsfile
             140     2                     CALL read_obs2(obsfile,nobslots(islot),&
             141     2                      & tmpelm(nn+1:nn+nobslots(islot)),tmplon(nn+1:nn+nobslots(islot)),&
             142     2                      & tmplat(nn+1:nn+nobslots(islot)),tmplev(nn+1:nn+nobslots(islot)),&
             143     2                      & tmpdat(nn+1:nn+nobslots(islot)),tmperr(nn+1:nn+nobslots(islot)),&
             144     2                      & tmphdxf(nn+1:nn+nobslots(islot),im),tmpqc0(nn+1:nn+nobslots(islot),im))
             145     2                     l = l+1
             146     2                   END DO
             147     1                   nn = nn + nobslots(islot)
             148     1                 END DO timeslots
             149                     
             150                       CALL MPI_BARRIER(MPI_COMM_WORLD,ierr)
             151                       ALLOCATE(wk2d(nobs,nbv))
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 6
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      tmphdxf, wk2d
                                   <<< Loop-information  End >>>
             152        pp   8v        wk2d = tmphdxf
             153                       CALL MPI_BARRIER(MPI_COMM_WORLD,ierr)
             154                       CALL MPI_ALLREDUCE(wk2d,tmphdxf,nobs*nbv,MPI_DOUBLE_PRECISION,MPI_SUM,MPI_COMM_WORLD,ierr)
             155                       DEALLOCATE(wk2d)
             156                       ALLOCATE(iwk2d(nobs,nbv))
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 6
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      tmpqc0, iwk2d
                                   <<< Loop-information  End >>>
             157        pp   8v        iwk2d = tmpqc0
             158                       CALL MPI_BARRIER(MPI_COMM_WORLD,ierr)
             159                       CALL MPI_ALLREDUCE(iwk2d,tmpqc0,nobs*nbv,MPI_INTEGER,MPI_MAX,MPI_COMM_WORLD,ierr)
             160                       DEALLOCATE(iwk2d)
             161                     
             162                     !$OMP PARALLEL DO SCHEDULE(DYNAMIC) PRIVATE(n,i)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      tmpqc, (unknown)
                                   <<<    PREFETCH(SOFT) : 20
                                   <<<     SEQUENTIAL : 20
                                   <<<      tmphdxf: 2, tmpdep: 12, tmpdat: 2
                                   <<<      tmperr: 2, tmpqc: 2
                                   <<< Loop-information  End >>>
             163     1  pp             DO n=1,nobs
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1231
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             164     1  pp   8v          tmpqc(n) = MINVAL(tmpqc0(n,:))
             165     1   p               IF(tmpqc(n) /= 1) CYCLE
             166     1   p               tmpdep(n) = tmphdxf(n,1)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1067
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             167     2  pp   8v          DO i=2,nbv
             168     2   p   8v            tmpdep(n) = tmpdep(n) + tmphdxf(n,i)
             169     2   p   8v          END DO
             170     1   p               tmpdep(n) = tmpdep(n) / REAL(nbv,r_size)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1143
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             171     2  pp   6v          DO i=1,nbv
             172     2   p   6v            tmphdxf(n,i) = tmphdxf(n,i) - tmpdep(n) ! Hdx
             173     2   p   6v          END DO
             174     1   p               tmpdep(n) = tmpdat(n) - tmpdep(n) ! y-Hx
             175     2   p               IF(ABS(tmpdep(n)) > gross_error*tmperr(n)) THEN !gross error
             176     2   p                 tmpqc(n) = 0
             177     2   p               END IF
             178     1   p             END DO
             179                     !$OMP END PARALLEL DO
             180                       DEALLOCATE(tmpqc0)
             181                     
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      tmpqc, (unknown)
                                   <<< Loop-information  End >>>
             182             8v        WRITE(6,'(I10,A)') SUM(tmpqc),' OBSERVATIONS TO BE ASSIMILATED'
             183                     
             184                       CALL monit_dep(nobs,tmpelm,tmpdep,tmpqc)
             185                     !
             186                     ! temporal observation localization
             187                     !
             188                     !  nn = 0
             189                     !  DO islot=1,nslots
             190                     !    tmperr(nn+1:nn+nobslots(islot)) = tmperr(nn+1:nn+nobslots(islot)) &
             191                     !      & * exp(0.25d0 * (REAL(islot-nbslot,r_size) / sigma_obst)**2)
             192                     !    nn = nn + nobslots(islot)
             193                     !  END DO
             194                     !
             195                     ! SELECT OBS IN THE NODE
             196                     !
             197                       nn = 0
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      tmpqc, (unknown)
                                   <<<    PREFETCH(SOFT) : 32
                                   <<<     SEQUENTIAL : 32
                                   <<<      tmpelm: 4, tmplon: 4, tmplat: 4
                                   <<<      tmplev: 4, tmpdat: 4, tmperr: 4, tmpk: 4
                                   <<<      tmpdep: 4
                                   <<< Loop-information  End >>>
             198     1                 DO n=1,nobs
             199     1                   IF(tmpqc(n) /= 1) CYCLE
             200     1               !    IF(tmplat(n) < MINVAL(lat1) .OR. MAXVAL(lat1) < tmplat(n)) THEN
             201     1               !      dlat = MIN( ABS(MINVAL(lat1)-tmplat(n)),ABS(MAXVAL(lat1)-tmplat(n)) )
             202     1               !      IF(dlat > dlat_zero) CYCLE
             203     1               !    END IF
             204     1               !    IF(tmplon(n) < MINVAL(lon1) .OR. MAXVAL(lon1) < tmplon(n)) THEN
             205     1               !      dlon1 = ABS(MINVAL(lon1) - tmplon(n))
             206     1               !      dlon1 = MIN(dlon1,360.0d0-dlon1)
             207     1               !      dlon2 = ABS(MAXVAL(lon1) - tmplon(n))
             208     1               !      dlon2 = MIN(dlon2,360.0d0-dlon2)
             209     1               !      dlon =  MIN(dlon1,dlon2) &
             210     1               !         & * pi*re*COS(tmplat(n)*pi/180.d0)/180.0d0
             211     1               !      IF(dlon > dist_zero) CYCLE
             212     1               !    END IF
             213     1                   nn = nn+1
             214     1                   tmpelm(nn) = tmpelm(n)
             215     1                   tmplon(nn) = tmplon(n)
             216     1                   tmplat(nn) = tmplat(n)
             217     1                   tmplev(nn) = tmplev(n)
             218     1                   tmpdat(nn) = tmpdat(n)
             219     1                   tmperr(nn) = tmperr(n)
             220     1                   tmpk(nn) = tmpk(n)
             221     1                   tmpdep(nn) = tmpdep(n)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1143
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<< Loop-information  End >>>
             222     1  pp   6v          tmphdxf(nn,:) = tmphdxf(n,:)
             223     1                   tmpqc(nn) = tmpqc(n)
             224     1                 END DO
             225                       nobs = nn
             226                       WRITE(6,'(I10,A,I3.3)') nobs,' OBSERVATIONS TO BE ASSIMILATED IN MYRANK ',myrank
             227                     !
             228                     ! SORT
             229                     !
             230                       ALLOCATE( tmp2elm(nobs) )
             231                       ALLOCATE( tmp2lon(nobs) )
             232                       ALLOCATE( tmp2lat(nobs) )
             233                       ALLOCATE( tmp2lev(nobs) )
             234                       ALLOCATE( tmp2dat(nobs) )
             235                       ALLOCATE( tmp2err(nobs) )
             236                     !  ALLOCATE( tmp2k(nobs) )
             237                       ALLOCATE( tmp2dep(nobs) )
             238                       ALLOCATE( tmp2hdxf(nobs,nbv) )
             239                       ALLOCATE( obselm(nobs) )
             240                       ALLOCATE( obslon(nobs) )
             241                       ALLOCATE( obslat(nobs) )
             242                       ALLOCATE( obslev(nobs) )
             243                       ALLOCATE( obsdat(nobs) )
             244                       ALLOCATE( obserr(nobs) )
             245                     !  ALLOCATE( obsk(nobs) )
             246                       ALLOCATE( obsdep(nobs) )
             247                       ALLOCATE( obshdxf(nobs,nbv) )
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1778
                                   <<<  [OPTIMIZATION]
                                   <<<    COLLAPSED
                                   <<<    SIMD(VL: 4)
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      nobsgrd, (unknown)
                                   <<< Loop-information  End >>>
             248        pp   8v        nobsgrd = 0
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2000
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    FULL UNROLLING
                                   <<< Loop-information  End >>>
             249         s   fv        nj = 0
             250                     !$OMP PARALLEL PRIVATE(i,j,n,nn)
             251                     !$OMP DO SCHEDULE(DYNAMIC)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 2
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH(SOFT) : 2
                                   <<<     SEQUENTIAL : 2
                                   <<<      lat: 2
                                   <<< Loop-information  End >>>
             252     1  pp             DO j=1,nlat-1
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      tmplat, (unknown)
                                   <<< Loop-information  End >>>
             253     2   p   8s          DO n=1,nobs
             254     2   p   8m            IF(tmplat(n) < lat(j) .OR. lat(j+1) <= tmplat(n)) CYCLE
             255     2   p   8s            nj(j) = nj(j) + 1
             256     2   p   8v          END DO
             257     1   p             END DO
             258                     !$OMP END DO
             259                     !$OMP DO SCHEDULE(DYNAMIC)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 10
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      njs, nj, (unknown)
                                   <<< Loop-information  End >>>
             260     1  pp             DO j=1,nlat-1
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      nj, (unknown)
                                   <<< Loop-information  End >>>
             261     1   p   8v          njs(j) = SUM(nj(0:j-1))
             262     1   p             END DO
             263                     !$OMP END DO
             264                     !$OMP DO SCHEDULE(DYNAMIC)
             265     1                 DO j=1,nlat-1
             266     1                   nn = 0
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      tmplat, (unknown)
                                   <<<    PREFETCH(SOFT) : 26
                                   <<<     SEQUENTIAL : 26
                                   <<<      tmpelm: 2, tmp2elm: 2, tmplon: 2
                                   <<<      tmp2lon: 2, tmp2lat: 2, tmplev: 2
                                   <<<      tmp2lev: 2, tmpdat: 2, tmp2dat: 2
                                   <<<      tmperr: 2, tmp2err: 2, tmpdep: 2
                                   <<<      tmp2dep: 2
                                   <<< Loop-information  End >>>
             267     2                   DO n=1,nobs
             268     2                     IF(tmplat(n) < lat(j) .OR. lat(j+1) <= tmplat(n)) CYCLE
             269     2                     nn = nn + 1
             270     2                     tmp2elm(njs(j)+nn) = tmpelm(n)
             271     2                     tmp2lon(njs(j)+nn) = tmplon(n)
             272     2                     tmp2lat(njs(j)+nn) = tmplat(n)
             273     2                     tmp2lev(njs(j)+nn) = tmplev(n)
             274     2                     tmp2dat(njs(j)+nn) = tmpdat(n)
             275     2                     tmp2err(njs(j)+nn) = tmperr(n)
             276     2               !      tmp2k(njs(j)+nn) = tmpk(n)
             277     2                     tmp2dep(njs(j)+nn) = tmpdep(n)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1143
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             278     2  pp   6v            tmp2hdxf(njs(j)+nn,:) = tmphdxf(n,:)
             279     2                   END DO
             280     1                 END DO
             281                     !$OMP END DO
             282                     !$OMP DO SCHEDULE(DYNAMIC)
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      tmp2lat, (unknown)
                                   <<< Loop-information  End >>>
             283     1                 DO j=1,nlat-1
             284     2                   IF(nj(j) == 0) THEN
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1778
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      nobsgrd, (unknown)
                                   <<< Loop-information  End >>>
             285     2   s   8v            nobsgrd(:,j) = njs(j)
             286     2                     CYCLE
             287     2                   END IF
             288     1                   nn = 0
             289     2                   DO i=1,nlon
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    PREFETCH(SOFT) : 18
                                   <<<     SEQUENTIAL : 18
                                   <<<      tmp2lon: 6, tmp2elm: 2, tmp2lat: 2
                                   <<<      tmp2lev: 2, tmp2dat: 2, tmp2err: 2
                                   <<<      tmp2dep: 2
                                   <<< Loop-information  End >>>
             290     3                     DO n=njs(j)+1,njs(j)+nj(j)
             291     4                       IF(i < nlon) THEN
             292     4                         IF(tmp2lon(n) < lon(i) .OR. lon(i+1) <= tmp2lon(n)) CYCLE
             293     4                       ELSE
             294     4                         IF(tmp2lon(n) < lon(nlon) .OR. 360.0d0 <= tmp2lon(n)) CYCLE
             295     4                       END IF
             296     3                       nn = nn + 1
             297     3                       obselm(njs(j)+nn) = tmp2elm(n)
             298     3                       obslon(njs(j)+nn) = tmp2lon(n)
             299     3                       obslat(njs(j)+nn) = tmp2lat(n)
             300     3                       obslev(njs(j)+nn) = tmp2lev(n)
             301     3                       obsdat(njs(j)+nn) = tmp2dat(n)
             302     3                       obserr(njs(j)+nn) = tmp2err(n)
             303     3               !        obsk(njs(j)+nn) = tmp2k(n)
             304     3                       obsdep(njs(j)+nn) = tmp2dep(n)
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 1143
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<< Loop-information  End >>>
             305     3  pp   6v              obshdxf(njs(j)+nn,:) = tmp2hdxf(n,:)
             306     3                     END DO
             307     2                     nobsgrd(i,j) = njs(j) + nn
             308     2                   END DO
             309     2                   IF(nn /= nj(j)) THEN
             310     2               !$OMP CRITICAL
             311     2                     WRITE(6,'(A,2I)') 'OBS DATA SORT ERROR: ',nn,nj(j)
             312     2                     WRITE(6,'(F6.2,A,F6.2)') lat(j),'< LAT <',lat(j+1)
                                   <<< Loop-information Start >>>
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    SOFTWARE PIPELINING
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      tmp2lat, (unknown)
                                   <<< Loop-information  End >>>
             313     2       8v            WRITE(6,'(F6.2,A,F6.2)') MINVAL(tmp2lat(njs(j)+1:njs(j)+nj(j))),'< OBSLAT <',MAXVAL(tmp2lat(njs(j)+1:njs(j)+nj(j)))
             314     2               !$OMP END CRITICAL
             315     2                   END IF
             316     1                 END DO
             317                     !$OMP END DO
             318                     !$OMP END PARALLEL
             319                       DEALLOCATE( tmp2elm )
             320                       DEALLOCATE( tmp2lon )
             321                       DEALLOCATE( tmp2lat )
             322                       DEALLOCATE( tmp2lev )
             323                       DEALLOCATE( tmp2dat )
             324                       DEALLOCATE( tmp2err )
             325                     !  DEALLOCATE( tmp2k )
             326                       DEALLOCATE( tmp2dep )
             327                       DEALLOCATE( tmp2hdxf )
             328                       DEALLOCATE( tmpelm )
             329                       DEALLOCATE( tmplon )
             330                       DEALLOCATE( tmplat )
             331                       DEALLOCATE( tmplev )
             332                       DEALLOCATE( tmpdat )
             333                       DEALLOCATE( tmperr )
             334                       DEALLOCATE( tmpk )
             335                       DEALLOCATE( tmpdep )
             336                       DEALLOCATE( tmphdxf )
             337                       DEALLOCATE( tmpqc )
             338                     
             339                       RETURN
             340                     END SUBROUTINE set_letkf_obs
             341                     !-----------------------------------------------------------------------
             342                     ! Monitor departure from gues/anal mean
             343                     !-----------------------------------------------------------------------
             344                     SUBROUTINE monit_mean(file)
             345                       IMPLICIT NONE
             346                       CHARACTER(4),INTENT(IN) :: file
             347                       REAL(r_size) :: v3d(nlon,nlat,nlev,nv3d)
             348                       REAL(r_size) :: v2d(nlon,nlat,nv2d)
             349                       REAL(r_size) :: p_full(nlon,nlat,nlev)
             350                       REAL(r_size) :: elem
             351                       REAL(r_size) :: bias_u,bias_v,bias_t,bias_ps,bias_q,bias_rh
             352                       REAL(r_size) :: rmse_u,rmse_v,rmse_t,rmse_ps,rmse_q,rmse_rh
             353                       REAL(r_size) :: hdxf,dep,ri,rj,rk
             354                       INTEGER :: n,iu,iv,it,iq,ips,irh
             355                       CHARACTER(11) :: filename='filexxx.grd'
             356                     
             357                       rmse_u  = 0.0d0
             358                       rmse_v  = 0.0d0
             359                       rmse_t  = 0.0d0
             360                       rmse_q  = 0.0d0
             361                       rmse_ps = 0.0d0
             362                       rmse_rh = 0.0d0
             363                       bias_u = 0.0d0
             364                       bias_v = 0.0d0
             365                       bias_t = 0.0d0
             366                       bias_q = 0.0d0
             367                       bias_ps = 0.0d0
             368                       bias_rh = 0.0d0
             369                       iu  = 0
             370                       iv  = 0
             371                       it  = 0
             372                       iq  = 0
             373                       ips = 0
             374                       irh = 0
             375                     
             376                       WRITE(filename(1:7),'(A4,A3)') file,'_me'
             377                       CALL read_grd(filename,v3d,v2d)
             378                       CALL calc_pfull(nlon,nlat,v2d(:,:,iv2d_ps),p_full)
             379                     
             380     1                 DO n=1,nobs
             381     1                   CALL phys2ijk(p_full,obselm(n),obslon(n),obslat(n),obslev(n),ri,rj,rk)
             382     1                   IF(CEILING(rk) > nlev) CYCLE
             383     2                   IF(CEILING(rk) < 2 .AND. NINT(obselm(n)) /= id_ps_obs) THEN
             384     3                     IF(NINT(obselm(n)) == id_u_obs .OR. NINT(obselm(n)) == id_v_obs) THEN
             385     3                       rk = 1.00001d0
             386     3                     ELSE
             387     3                       CYCLE
             388     3                     END IF
             389     2                   END IF
             390     1                   CALL Trans_XtoY(obselm(n),ri,rj,rk,v3d,v2d,p_full,hdxf)
             391     1                   dep = obsdat(n) - hdxf
             392     2                   SELECT CASE(NINT(obselm(n)))
             393     2                   CASE(id_u_obs)
             394     2                     rmse_u = rmse_u + dep**2
             395     2                     bias_u = bias_u + dep
             396     2                     iu = iu + 1
             397     2                   CASE(id_v_obs)
             398     2                     rmse_v = rmse_v + dep**2
             399     2                     bias_v = bias_v + dep
             400     2                     iv = iv + 1
             401     2                   CASE(id_t_obs)
             402     2                     rmse_t = rmse_t + dep**2
             403     2                     bias_t = bias_t + dep
             404     2                     it = it + 1
             405     2                   CASE(id_q_obs)
             406     2                     rmse_q = rmse_q + dep**2
             407     2                     bias_q = bias_q + dep
             408     2                     iq = iq + 1
             409     2                   CASE(id_ps_obs)
             410     2                     rmse_ps = rmse_ps + dep**2
             411     2                     bias_ps = bias_ps + dep
             412     2                     ips = ips + 1
             413     2                   CASE(id_rh_obs)
             414     2                     rmse_rh = rmse_rh + dep**2
             415     2                     bias_rh = bias_rh + dep
             416     2                     irh = irh + 1
             417     2                   END SELECT
             418     1                 END DO
             419                     
             420     1                 IF(iu == 0) THEN
             421     1                   rmse_u = undef
             422     1                   bias_u = undef
             423     1                 ELSE
             424     1                   rmse_u = SQRT(rmse_u / REAL(iu,r_size))
             425     1                   bias_u = bias_u / REAL(iu,r_size)
             426     1                 END IF
             427     1                 IF(iv == 0) THEN
             428     1                   rmse_v = undef
             429     1                   bias_v = undef
             430     1                 ELSE
             431     1                   rmse_v = SQRT(rmse_v / REAL(iv,r_size))
             432     1                   bias_v = bias_v / REAL(iv,r_size)
             433     1                 END IF
             434     1                 IF(it == 0) THEN
             435     1                   rmse_t = undef
             436     1                   bias_t = undef
             437     1                 ELSE
             438     1                   rmse_t = SQRT(rmse_t / REAL(it,r_size))
             439     1                   bias_t = bias_t / REAL(it,r_size)
             440     1                 END IF
             441     1                 IF(iq == 0) THEN
             442     1                   rmse_q = undef
             443     1                   bias_q = undef
             444     1                 ELSE
             445     1                   rmse_q = SQRT(rmse_q / REAL(iq,r_size))
             446     1                   bias_q = bias_q / REAL(iq,r_size)
             447     1                 END IF
             448     1                 IF(ips == 0) THEN
             449     1                   rmse_ps = undef
             450     1                   bias_ps = undef
             451     1                 ELSE
             452     1                   rmse_ps = SQRT(rmse_ps / REAL(ips,r_size))
             453     1                   bias_ps = bias_ps / REAL(ips,r_size)
             454     1                 END IF
             455     1                 IF(irh == 0) THEN
             456     1                   rmse_rh = undef
             457     1                   bias_rh = undef
             458     1                 ELSE
             459     1                   rmse_rh = SQRT(rmse_rh / REAL(irh,r_size))
             460     1                   bias_rh = bias_rh / REAL(irh,r_size)
             461     1                 END IF
             462                     
             463                       WRITE(6,'(3A)') '== PARTIAL OBSERVATIONAL DEPARTURE (',file,') =============================='
             464                       WRITE(6,'(6A12)') 'U','V','T','Q','PS','RH'
             465                       WRITE(6,'(6ES12.3)') bias_u,bias_v,bias_t,bias_q,bias_ps,bias_rh
             466                       WRITE(6,'(6ES12.3)') rmse_u,rmse_v,rmse_t,rmse_q,rmse_ps,rmse_rh
             467                       WRITE(6,'(A)') '== NUMBER OF OBSERVATIONS =============================================='
             468                       WRITE(6,'(6A12)') 'U','V','T','Q','PS','RH'
             469                       WRITE(6,'(6I12)') iu,iv,it,iq,ips,irh
             470                       WRITE(6,'(A)') '========================================================================'
             471                     
             472                       RETURN
             473                     END SUBROUTINE monit_mean
             474                     !------------------------------------------------------------------------
             475                     ! search a latitude with the longest lon-grids for the localization mask
             476                     !------------------------------------------------------------------------
             477                     SUBROUTINE search_longestlat(dist_zero,lat_cnt,dlat_zero,dlon_local)
             478                       IMPLICIT NONE
             479                       REAL(r_size),INTENT(IN)  :: dist_zero
             480                       REAL(r_size),INTENT(IN)  :: lat_cnt
             481                       REAL(r_size),INTENT(IN)  :: dlat_zero
             482                       REAL(r_size),INTENT(OUT) :: dlon_local
             483                       REAL(r_size) :: lat_dist,lat_c
             484                       REAL(r_size) :: cosd
             485                       INTEGER :: j,j0,j1
             486                     
             487     1                 IF(ABS(lat_cnt)+dlat_zero >= 90.0d0) THEN
             488     1                   dlon_local = 360.0d0
             489     1               !   dlon_local = 180.0d0
             490     1                   RETURN
             491     1                 ENDIF
             492                     
             493                     !DEBUG by kotsuki!   DO j=1,nlat
             494                     !DEBUG by kotsuki!    IF( lat(j)>=(lat_cnt-dlat_zero) .AND. lat(j-1)<(lat_cnt-dlat_zero) ) THEN
             495                     !DEBUG by kotsuki!      j0 = j
             496                     !DEBUG by kotsuki!    ENDIF
             497                     !DEBUG by kotsuki!    IF( lat(j)>=(lat_cnt+dlat_zero) ) THEN
             498                     !DEBUG by kotsuki!      j1 = j-1
             499                     !DEBUG by kotsuki!      EXIT
             500                     !DEBUG by kotsuki!    ENDIF
             501                     !DEBUG by kotsuki!  END DO
             502                     
             503                       lat_c = lat_cnt * pi/180.0d0
             504                       dlon_local = 0.0d0
             505                     !DEBUG by kotsuki!  DO j=j0,j1
                                   <<< Loop-information Start >>>
                                   <<<  [PARALLELIZATION]
                                   <<<    Standard iteration count: 22
                                   <<<  [OPTIMIZATION]
                                   <<<    SIMD(VL: 4)
                                   <<<    PREFETCH(HARD) Expected by compiler :
                                   <<<      lat, (unknown)
                                   <<< Loop-information  End >>>
             506     1  pp    v        DO j=1,nlat
             507     1   p    v          lat_dist = lat(j) * pi/180.0d0
             508     1   p    v          cosd = (COS(dist_zero/re)-SIN(lat_dist)*SIN(lat_c)) &
             509     1                  &       / (COS(lat_dist)*COS(lat_c))
             510     1   p    v          cosd = MIN(1.0d0,cosd)
             511     1   p    v          cosd = MAX(-1.0d0,cosd)
             512     1   p    v          dlon_local = MAX(ACOS(cosd)/pi*180.0d0,dlon_local)
             513     1   p    v        END DO
             514                     
             515                       RETURN
             516                     END SUBROUTINE search_longestlat
             517                     END MODULE letkf_obs

 Diagnostic messages: program name(letkf_obs)
   jwd8220o-i  "letkf_obs.f90", line 1: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
  Module subprogram name(set_letkf_obs)
   jwd2006i-i  "letkf_obs.f90", line 53: 'dlat' is declared but never referenced.
   jwd2006i-i  "letkf_obs.f90", line 53: 'dlon' is declared but never referenced.
   jwd2006i-i  "letkf_obs.f90", line 53: 'dlon2' is declared but never referenced.
   jwd2006i-i  "letkf_obs.f90", line 53: 'dlon1' is declared but never referenced.
   jwd8209o-i  "letkf_obs.f90", line 84: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "letkf_obs.f90", line 85: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "letkf_obs.f90", line 86: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "letkf_obs.f90", line 86: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8208o-i  "letkf_obs.f90", line 168: Method of calculating sum or product is changed.
   jwd8201o-i  "letkf_obs.f90", line 170: Invariant expression within loop is moved outside loop.
   jwd8206o-i  "letkf_obs.f90", line 170: Division is changed to multiplication by reciprocal.
   jwd8201o-i  "letkf_obs.f90", line 254: Invariant expression within loop is moved outside loop.
   jwd8201o-i  "letkf_obs.f90", line 270: Invariant expression within loop is moved outside loop.
   jwd8201o-i  "letkf_obs.f90", line 297: Invariant expression within loop is moved outside loop.
  Module subprogram name(monit_mean)
   jwd2006i-i  "letkf_obs.f90", line 350: 'elem' is declared but never referenced.
  Module subprogram name(search_longestlat)
   jwd2006i-i  "letkf_obs.f90", line 485: 'j1' is declared but never referenced.
   jwd2006i-i  "letkf_obs.f90", line 485: 'j0' is declared but never referenced.
   jwd8206o-i  "letkf_obs.f90", line 503: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "letkf_obs.f90", line 503: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "letkf_obs.f90", line 507: Division is changed to multiplication by reciprocal.
   jwd8206o-i  "letkf_obs.f90", line 508: Division is changed to multiplication by reciprocal.
   jwd8206o-i  "letkf_obs.f90", line 512: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "letkf_obs.f90", line 512: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "letkf_obs.f90", line 513: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.

 Procedure information
   Lines      : 517
   Statements : 398
   Stack(byte): 26576
   Prefetch num: 98

 Total information
   Procedures       : 1
   Total lines      : 517
   Total statements : 398
   Total stack(byte): 26576
   Total prefetch num: 98

